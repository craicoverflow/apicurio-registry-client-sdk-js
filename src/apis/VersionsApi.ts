/* tslint:disable */
/* eslint-disable */
/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.2.0.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RuleViolationError,
    RuleViolationErrorFromJSON,
    RuleViolationErrorToJSON,
    UpdateState,
    UpdateStateFromJSON,
    UpdateStateToJSON,
    VersionMetaData,
    VersionMetaDataFromJSON,
    VersionMetaDataToJSON,
    VersionSearchResults,
    VersionSearchResultsFromJSON,
    VersionSearchResultsToJSON,
} from '../models';

export interface CreateArtifactVersionRequest {
    groupId: string;
    artifactId: string;
    body: Blob;
    xRegistryVersion?: string;
    xRegistryName?: string;
    xRegistryDescription?: string;
    xRegistryDescriptionEncoded?: string;
    xRegistryNameEncoded?: string;
}

export interface GetArtifactVersionRequest {
    groupId: string;
    artifactId: string;
    version: string;
}

export interface ListArtifactVersionsRequest {
    groupId: string;
    artifactId: string;
    offset?: number;
    limit?: number;
}

export interface UpdateArtifactVersionStateRequest {
    groupId: string;
    artifactId: string;
    version: string;
    updateState: UpdateState;
}

/**
 * 
 */
export class VersionsApi extends runtime.BaseAPI {

    /**
     * Creates a new version of the artifact by uploading new content.  The configured rules for the artifact are applied, and if they all pass, the new content is added as the most recent  version of the artifact.  If any of the rules fail, an error is returned.  The body of the request should be the raw content of the new artifact version, and the type of that content should match the artifact\'s type (for example if the artifact type is `AVRO` then the content of the request should be an Apache Avro document).  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with this `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * Create artifact version
     */
    async createArtifactVersionRaw(requestParameters: CreateArtifactVersionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VersionMetaData>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling createArtifactVersion.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling createArtifactVersion.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createArtifactVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRegistryVersion !== undefined && requestParameters.xRegistryVersion !== null) {
            headerParameters['X-Registry-Version'] = String(requestParameters.xRegistryVersion);
        }

        if (requestParameters.xRegistryName !== undefined && requestParameters.xRegistryName !== null) {
            headerParameters['X-Registry-Name'] = String(requestParameters.xRegistryName);
        }

        if (requestParameters.xRegistryDescription !== undefined && requestParameters.xRegistryDescription !== null) {
            headerParameters['X-Registry-Description'] = String(requestParameters.xRegistryDescription);
        }

        if (requestParameters.xRegistryDescriptionEncoded !== undefined && requestParameters.xRegistryDescriptionEncoded !== null) {
            headerParameters['X-Registry-Description-Encoded'] = String(requestParameters.xRegistryDescriptionEncoded);
        }

        if (requestParameters.xRegistryNameEncoded !== undefined && requestParameters.xRegistryNameEncoded !== null) {
            headerParameters['X-Registry-Name-Encoded'] = String(requestParameters.xRegistryNameEncoded);
        }

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}/versions`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionMetaDataFromJSON(jsonValue));
    }

    /**
     * Creates a new version of the artifact by uploading new content.  The configured rules for the artifact are applied, and if they all pass, the new content is added as the most recent  version of the artifact.  If any of the rules fail, an error is returned.  The body of the request should be the raw content of the new artifact version, and the type of that content should match the artifact\'s type (for example if the artifact type is `AVRO` then the content of the request should be an Apache Avro document).  This operation can fail for the following reasons:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with this `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * Create artifact version
     */
    async createArtifactVersion(requestParameters: CreateArtifactVersionRequest, initOverrides?: RequestInit): Promise<VersionMetaData> {
        const response = await this.createArtifactVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single version of the artifact content.  Both the `artifactId` and the unique `version` number must be provided.  The `Content-Type` of the response depends  on the artifact type.  In most cases, this is `application/json`, but for some types  it may be different (for example, `PROTOBUF`).  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact version
     */
    async getArtifactVersionRaw(requestParameters: GetArtifactVersionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getArtifactVersion.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling getArtifactVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getArtifactVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}/versions/{version}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieves a single version of the artifact content.  Both the `artifactId` and the unique `version` number must be provided.  The `Content-Type` of the response depends  on the artifact type.  In most cases, this is `application/json`, but for some types  it may be different (for example, `PROTOBUF`).  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact version
     */
    async getArtifactVersion(requestParameters: GetArtifactVersionRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.getArtifactVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all versions of the artifact.  The result set is paged.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * List artifact versions
     */
    async listArtifactVersionsRaw(requestParameters: ListArtifactVersionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VersionSearchResults>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling listArtifactVersions.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling listArtifactVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}/versions`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionSearchResultsFromJSON(jsonValue));
    }

    /**
     * Returns a list of all versions of the artifact.  The result set is paged.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * List artifact versions
     */
    async listArtifactVersions(requestParameters: ListArtifactVersionsRequest, initOverrides?: RequestInit): Promise<VersionSearchResults> {
        const response = await this.listArtifactVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the state of a specific version of an artifact.  For example, you can use  this operation to disable a specific version.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Update artifact version state
     */
    async updateArtifactVersionStateRaw(requestParameters: UpdateArtifactVersionStateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling updateArtifactVersionState.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling updateArtifactVersionState.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling updateArtifactVersionState.');
        }

        if (requestParameters.updateState === null || requestParameters.updateState === undefined) {
            throw new runtime.RequiredError('updateState','Required parameter requestParameters.updateState was null or undefined when calling updateArtifactVersionState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}/versions/{version}/state`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStateToJSON(requestParameters.updateState),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the state of a specific version of an artifact.  For example, you can use  this operation to disable a specific version.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * No version with this `version` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Update artifact version state
     */
    async updateArtifactVersionState(requestParameters: UpdateArtifactVersionStateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateArtifactVersionStateRaw(requestParameters, initOverrides);
    }

}
