/* tslint:disable */
/* eslint-disable */
/**
 * Apicurio Registry API [v2]
 * Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v2` by default. Therefore you must prefix all API operation paths with `../apis/registry/v2` in this case. For example: `../apis/registry/v2/ids/globalIds/{globalId}`. 
 *
 * The version of the OpenAPI document: 2.2.0.Final
 * Contact: apicurio@lists.jboss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ArtifactMetaData,
    ArtifactMetaDataFromJSON,
    ArtifactMetaDataToJSON,
    ArtifactSearchResults,
    ArtifactSearchResultsFromJSON,
    ArtifactSearchResultsToJSON,
    ArtifactType,
    ArtifactTypeFromJSON,
    ArtifactTypeToJSON,
    IfExists,
    IfExistsFromJSON,
    IfExistsToJSON,
    RuleViolationError,
    RuleViolationErrorFromJSON,
    RuleViolationErrorToJSON,
    SortBy,
    SortByFromJSON,
    SortByToJSON,
    SortOrder,
    SortOrderFromJSON,
    SortOrderToJSON,
    UpdateState,
    UpdateStateFromJSON,
    UpdateStateToJSON,
} from '../models';

export interface CreateArtifactRequest {
    groupId: string;
    body: Blob;
    xRegistryArtifactType?: ArtifactType;
    xRegistryArtifactId?: string;
    xRegistryVersion?: string;
    ifExists?: IfExists;
    canonical?: boolean;
    xRegistryDescription?: string;
    xRegistryDescriptionEncoded?: string;
    xRegistryName?: string;
    xRegistryNameEncoded?: string;
}

export interface DeleteArtifactRequest {
    groupId: string;
    artifactId: string;
}

export interface DeleteArtifactsInGroupRequest {
    groupId: string;
}

export interface GetContentByGlobalIdRequest {
    globalId: number;
}

export interface GetContentByHashRequest {
    contentHash: string;
}

export interface GetContentByIdRequest {
    contentId: number;
}

export interface GetLatestArtifactRequest {
    groupId: string;
    artifactId: string;
}

export interface ListArtifactsInGroupRequest {
    groupId: string;
    limit?: number;
    offset?: number;
    order?: SortOrder;
    orderby?: SortBy;
}

export interface SearchArtifactsRequest {
    name?: string;
    offset?: number;
    limit?: number;
    order?: SortOrder;
    orderby?: SortBy;
    labels?: Array<string>;
    properties?: Array<string>;
    description?: string;
    group?: string;
}

export interface SearchArtifactsByContentRequest {
    body: Blob;
    canonical?: boolean;
    artifactType?: ArtifactType;
    offset?: number;
    limit?: number;
    order?: SearchArtifactsByContentOrderEnum;
    orderby?: SearchArtifactsByContentOrderbyEnum;
}

export interface UpdateArtifactRequest {
    groupId: string;
    artifactId: string;
    body: Blob;
    xRegistryVersion?: string;
    xRegistryName?: string;
    xRegistryNameEncoded?: string;
    xRegistryDescription?: string;
    xRegistryDescriptionEncoded?: string;
}

export interface UpdateArtifactStateRequest {
    groupId: string;
    artifactId: string;
    updateState: UpdateState;
}

/**
 * 
 */
export class ArtifactsApi extends runtime.BaseAPI {

    /**
     * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request\'s `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * Create artifact
     */
    async createArtifactRaw(requestParameters: CreateArtifactRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtifactMetaData>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling createArtifact.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createArtifact.');
        }

        const queryParameters: any = {};

        if (requestParameters.ifExists !== undefined) {
            queryParameters['ifExists'] = requestParameters.ifExists;
        }

        if (requestParameters.canonical !== undefined) {
            queryParameters['canonical'] = requestParameters.canonical;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRegistryArtifactType !== undefined && requestParameters.xRegistryArtifactType !== null) {
            headerParameters['X-Registry-ArtifactType'] = String(requestParameters.xRegistryArtifactType);
        }

        if (requestParameters.xRegistryArtifactId !== undefined && requestParameters.xRegistryArtifactId !== null) {
            headerParameters['X-Registry-ArtifactId'] = String(requestParameters.xRegistryArtifactId);
        }

        if (requestParameters.xRegistryVersion !== undefined && requestParameters.xRegistryVersion !== null) {
            headerParameters['X-Registry-Version'] = String(requestParameters.xRegistryVersion);
        }

        if (requestParameters.xRegistryDescription !== undefined && requestParameters.xRegistryDescription !== null) {
            headerParameters['X-Registry-Description'] = String(requestParameters.xRegistryDescription);
        }

        if (requestParameters.xRegistryDescriptionEncoded !== undefined && requestParameters.xRegistryDescriptionEncoded !== null) {
            headerParameters['X-Registry-Description-Encoded'] = String(requestParameters.xRegistryDescriptionEncoded);
        }

        if (requestParameters.xRegistryName !== undefined && requestParameters.xRegistryName !== null) {
            headerParameters['X-Registry-Name'] = String(requestParameters.xRegistryName);
        }

        if (requestParameters.xRegistryNameEncoded !== undefined && requestParameters.xRegistryNameEncoded !== null) {
            headerParameters['X-Registry-Name-Encoded'] = String(requestParameters.xRegistryNameEncoded);
        }

        const response = await this.request({
            path: `/groups/{groupId}/artifacts`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactMetaDataFromJSON(jsonValue));
    }

    /**
     * Creates a new artifact by posting the artifact content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the  supported types, but may be in another format for a few (for example, `PROTOBUF`).  The registry attempts to figure out what kind of artifact is being added from the following supported list:  * Avro (`AVRO`) * Protobuf (`PROTOBUF`) * JSON Schema (`JSON`) * Kafka Connect (`KCONNECT`) * OpenAPI (`OPENAPI`) * AsyncAPI (`ASYNCAPI`) * GraphQL (`GRAPHQL`) * Web Services Description Language (`WSDL`) * XML Schema (`XSD`)  Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType`  HTTP request header, or include a hint in the request\'s `Content-Type`.  For example:  ``` Content-Type: application/json; artifactType=AVRO ```  An artifact is created using the content provided in the body of the request.  This content is created under a unique artifact ID that can be provided in the request using the `X-Registry-ArtifactId` request header.  If not provided in the request, the server generates a unique ID for the artifact.  It is typically recommended that callers provide the ID, because this is typically a meaningful identifier,  and for most use cases should be supplied by the caller.  If an artifact with the provided artifact ID already exists, the default behavior is for the server to reject the content with a 409 error.  However, the caller can supply the `ifExists` query parameter to alter this default behavior. The `ifExists` query parameter can have one of the following values:  * `FAIL` (*default*) - server rejects the content with a 409 error * `UPDATE` - server updates the existing artifact and returns the new metadata * `RETURN` - server does not create or add content to the server, but instead  returns the metadata for the existing artifact * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the  provided content if such a version exists, otherwise a new version is created  This operation may fail for one of the following reasons:  * An invalid `ArtifactType` was indicated (HTTP error `400`) * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`) * Provided content (request body) was empty (HTTP error `400`) * An artifact with the provided ID already exists (HTTP error `409`) * The content violates one of the configured global rules (HTTP error `409`) * A server error occurred (HTTP error `500`) 
     * Create artifact
     */
    async createArtifact(requestParameters: CreateArtifactRequest, initOverrides?: RequestInit): Promise<ArtifactMetaData> {
        const response = await this.createArtifactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * Delete artifact
     */
    async deleteArtifactRaw(requestParameters: DeleteArtifactRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deleteArtifact.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling deleteArtifact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an artifact completely, resulting in all versions of the artifact also being deleted.  This may fail for one of the following reasons:  * No artifact with the `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`)
     * Delete artifact
     */
    async deleteArtifact(requestParameters: DeleteArtifactRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteArtifactRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes all of the artifacts that exist in a given group.
     * Deletes all artifacts in a group
     */
    async deleteArtifactsInGroupRaw(requestParameters: DeleteArtifactsInGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deleteArtifactsInGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{groupId}/artifacts`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all of the artifacts that exist in a given group.
     * Deletes all artifacts in a group
     */
    async deleteArtifactsInGroup(requestParameters: DeleteArtifactsInGroupRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteArtifactsInGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact by global ID
     */
    async getContentByGlobalIdRaw(requestParameters: GetContentByGlobalIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.globalId === null || requestParameters.globalId === undefined) {
            throw new runtime.RequiredError('globalId','Required parameter requestParameters.globalId was null or undefined when calling getContentByGlobalId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ids/globalIds/{globalId}`.replace(`{${"globalId"}}`, encodeURIComponent(String(requestParameters.globalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Gets the content for an artifact version in the registry using its globally unique identifier.  This operation may fail for one of the following reasons:  * No artifact version with this `globalId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact by global ID
     */
    async getContentByGlobalId(requestParameters: GetContentByGlobalIdRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.getContentByGlobalIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this `contentHash` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact content by SHA-256 hash
     */
    async getContentByHashRaw(requestParameters: GetContentByHashRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.contentHash === null || requestParameters.contentHash === undefined) {
            throw new runtime.RequiredError('contentHash','Required parameter requestParameters.contentHash was null or undefined when calling getContentByHash.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ids/contentHashes/{contentHash}/`.replace(`{${"contentHash"}}`, encodeURIComponent(String(requestParameters.contentHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Gets the content for an artifact version in the registry using the  SHA-256 hash of the content.  This content hash may be shared by multiple artifact versions in the case where the artifact versions have identical content.  This operation may fail for one of the following reasons:  * No content with this `contentHash` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact content by SHA-256 hash
     */
    async getContentByHash(requestParameters: GetContentByHashRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.getContentByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this `contentId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact content by ID
     */
    async getContentByIdRaw(requestParameters: GetContentByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling getContentById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ids/contentIds/{contentId}/`.replace(`{${"contentId"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Gets the content for an artifact version in the registry using the unique content identifier for that content.  This content ID may be shared by multiple artifact versions in the case where the artifact versions are identical.  This operation may fail for one of the following reasons:  * No content with this `contentId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get artifact content by ID
     */
    async getContentById(requestParameters: GetContentByIdRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.getContentByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but  for some types it may be different (for example, `PROTOBUF`).  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get latest artifact
     */
    async getLatestArtifactRaw(requestParameters: GetLatestArtifactRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getLatestArtifact.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling getLatestArtifact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the response depends on the artifact type.  In most cases, this is `application/json`, but  for some types it may be different (for example, `PROTOBUF`).  This operation may fail for one of the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Get latest artifact
     */
    async getLatestArtifact(requestParameters: GetLatestArtifactRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.getLatestArtifactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all artifacts in the group.  This list is paged.
     * List artifacts in group
     */
    async listArtifactsInGroupRaw(requestParameters: ListArtifactsInGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtifactSearchResults>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling listArtifactsInGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groups/{groupId}/artifacts`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactSearchResultsFromJSON(jsonValue));
    }

    /**
     * Returns a list of all artifacts in the group.  This list is paged.
     * List artifacts in group
     */
    async listArtifactsInGroup(requestParameters: ListArtifactsInGroupRequest, initOverrides?: RequestInit): Promise<ArtifactSearchResults> {
        const response = await this.listArtifactsInGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * Search for artifacts
     */
    async searchArtifactsRaw(requestParameters: SearchArtifactsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtifactSearchResults>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        if (requestParameters.labels) {
            queryParameters['labels'] = requestParameters.labels;
        }

        if (requestParameters.properties) {
            queryParameters['properties'] = requestParameters.properties;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/artifacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactSearchResultsFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of all artifacts that match the provided filter criteria. 
     * Search for artifacts
     */
    async searchArtifacts(requestParameters: SearchArtifactsRequest = {}, initOverrides?: RequestInit): Promise<ArtifactSearchResults> {
        const response = await this.searchArtifactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * Search for artifacts by content
     */
    async searchArtifactsByContentRaw(requestParameters: SearchArtifactsByContentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtifactSearchResults>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling searchArtifactsByContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.canonical !== undefined) {
            queryParameters['canonical'] = requestParameters.canonical;
        }

        if (requestParameters.artifactType !== undefined) {
            queryParameters['artifactType'] = requestParameters.artifactType;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderby !== undefined) {
            queryParameters['orderby'] = requestParameters.orderby;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/search/artifacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactSearchResultsFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of all artifacts with at least one version that matches the posted content. 
     * Search for artifacts by content
     */
    async searchArtifactsByContent(requestParameters: SearchArtifactsByContentRequest, initOverrides?: RequestInit): Promise<ArtifactSearchResults> {
        const response = await this.searchArtifactsByContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an artifact by uploading new content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`). The type of the content should be compatible with the artifact\'s type (it would be an error to update an `AVRO` artifact with new `OPENAPI` content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
     * Update artifact
     */
    async updateArtifactRaw(requestParameters: UpdateArtifactRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArtifactMetaData>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling updateArtifact.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling updateArtifact.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateArtifact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRegistryVersion !== undefined && requestParameters.xRegistryVersion !== null) {
            headerParameters['X-Registry-Version'] = String(requestParameters.xRegistryVersion);
        }

        if (requestParameters.xRegistryName !== undefined && requestParameters.xRegistryName !== null) {
            headerParameters['X-Registry-Name'] = String(requestParameters.xRegistryName);
        }

        if (requestParameters.xRegistryNameEncoded !== undefined && requestParameters.xRegistryNameEncoded !== null) {
            headerParameters['X-Registry-Name-Encoded'] = String(requestParameters.xRegistryNameEncoded);
        }

        if (requestParameters.xRegistryDescription !== undefined && requestParameters.xRegistryDescription !== null) {
            headerParameters['X-Registry-Description'] = String(requestParameters.xRegistryDescription);
        }

        if (requestParameters.xRegistryDescriptionEncoded !== undefined && requestParameters.xRegistryDescriptionEncoded !== null) {
            headerParameters['X-Registry-Description-Encoded'] = String(requestParameters.xRegistryDescriptionEncoded);
        }

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactMetaDataFromJSON(jsonValue));
    }

    /**
     * Updates an artifact by uploading new content.  The body of the request should be the raw content of the artifact.  This is typically in JSON format for *most* of the supported types, but may be in another format for a few (for example, `PROTOBUF`). The type of the content should be compatible with the artifact\'s type (it would be an error to update an `AVRO` artifact with new `OPENAPI` content, for example).  The update could fail for a number of reasons including:  * Provided content (request body) was empty (HTTP error `400`) * No artifact with the `artifactId` exists (HTTP error `404`) * The new content violates one of the rules configured for the artifact (HTTP error `409`) * A server error occurred (HTTP error `500`)  When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.
     * Update artifact
     */
    async updateArtifact(requestParameters: UpdateArtifactRequest, initOverrides?: RequestInit): Promise<ArtifactMetaData> {
        const response = await this.updateArtifactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as `DEPRECATED`.  The operation changes the state of the latest  version of the artifact.  If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Update artifact state
     */
    async updateArtifactStateRaw(requestParameters: UpdateArtifactStateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling updateArtifactState.');
        }

        if (requestParameters.artifactId === null || requestParameters.artifactId === undefined) {
            throw new runtime.RequiredError('artifactId','Required parameter requestParameters.artifactId was null or undefined when calling updateArtifactState.');
        }

        if (requestParameters.updateState === null || requestParameters.updateState === undefined) {
            throw new runtime.RequiredError('updateState','Required parameter requestParameters.updateState was null or undefined when calling updateArtifactState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groups/{groupId}/artifacts/{artifactId}/state`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"artifactId"}}`, encodeURIComponent(String(requestParameters.artifactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStateToJSON(requestParameters.updateState),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the state of the artifact.  For example, you can use this to mark the latest version of an artifact as `DEPRECATED`.  The operation changes the state of the latest  version of the artifact.  If multiple versions exist, only the most recent is changed.  This operation can fail for the following reasons:  * No artifact with this `artifactId` exists (HTTP error `404`) * A server error occurred (HTTP error `500`) 
     * Update artifact state
     */
    async updateArtifactState(requestParameters: UpdateArtifactStateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateArtifactStateRaw(requestParameters, initOverrides);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SearchArtifactsByContentOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchArtifactsByContentOrderbyEnum {
    Name = 'name',
    CreatedOn = 'createdOn'
}
